/* tslint:disable */
/* eslint-disable */
/**
 * Rss-back
 * Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { ResponseLoginDto, User } from "../models";
import {
  ResponseLoginDtoFromJSON,
  ResponseLoginDtoToJSON,
  UserFromJSON,
  UserToJSON,
} from "../models";

export interface AuthControllerLoginRequest {
  user: User;
}

export interface AuthControllerRegisterRequest {
  user: User;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI {
  /**
   * Login
   */
  async authControllerLoginRaw(
    requestParameters: AuthControllerLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseLoginDto>> {
    if (
      requestParameters.user === null ||
      requestParameters.user === undefined
    ) {
      throw new runtime.RequiredError(
        "user",
        "Required parameter requestParameters.user was null or undefined when calling authControllerLogin."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/auth/login`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserToJSON(requestParameters.user),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResponseLoginDtoFromJSON(jsonValue)
    );
  }

  /**
   * Login
   */
  async authControllerLogin(
    requestParameters: AuthControllerLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseLoginDto> {
    const response = await this.authControllerLoginRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Register
   */
  async authControllerRegisterRaw(
    requestParameters: AuthControllerRegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseLoginDto>> {
    if (
      requestParameters.user === null ||
      requestParameters.user === undefined
    ) {
      throw new runtime.RequiredError(
        "user",
        "Required parameter requestParameters.user was null or undefined when calling authControllerRegister."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/auth/register`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserToJSON(requestParameters.user),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResponseLoginDtoFromJSON(jsonValue)
    );
  }

  /**
   * Register
   */
  async authControllerRegister(
    requestParameters: AuthControllerRegisterRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseLoginDto> {
    const response = await this.authControllerRegisterRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
